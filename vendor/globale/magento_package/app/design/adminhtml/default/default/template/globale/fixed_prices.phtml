<style>
    .fixedPriceWidth {
        width: 50% !important;
    }
    .fixedPriceHidden{
        display:none;
    }
</style>
<?php $_htmlId      = $this->getElement()->getHtmlId() ?>
<?php $_htmlClass   = $this->getElement()->getClass() ?>
<?php $_htmlName    = $this->getElement()->getName() ?>
<?php $_priceValueValidation = $this->getPriceValidation('validate-greater-than-zero'); ?>

<tr>
    <td class="label"><?php echo $this->getElement()->getLabel() ?></td>
    <td colspan="10" class="grid tier">
        <table cellspacing="0" class="data border fixedPriceWidth" id="<?php echo $_htmlId ?>_table">
            <col width="120" />
            <col width="95" />
            <col />
            <col width="1" />
            <thead>
                <tr class="headings">
                    <th><?php echo $this->__('Country') ?></th>
                    <th><?php echo $this->__('Currency') ?></th>
                    <th><?php echo $this->__('Price') ?></th>
                    <th><?php echo $this->__('Special Price') ?></th>
                    <th><?php echo $this->__('Start Date') ?></th>
                    <th><?php echo $this->__('End Date') ?></th>
                    <th class="last"><?php echo Mage::helper('catalog')->__('Action') ?></th>
                </tr>
            </thead>
            <tbody id="<?php echo $_htmlId ?>_container"></tbody>
            <tfoot>
                <tr>
                    <td></td>
                    <td colspan="7" class="a-right"><?php echo $this->getAddButtonHtml() ?></td>
                </tr>
            </tfoot>
        </table>

        <script type="text/javascript">
            //<![CDATA[
            var countries = <?php echo json_encode($this->getCountries())?>;
            var FixedPriceRowTemplate = '<tr>'
                + '<td>'
                + '<select class="<?php echo $_htmlClass ?> required-entry" name="<?php echo $_htmlName ?>[{{index}}][country]" id="<?php echo $_htmlId ?>_row_{{index}}_country" style="width:100px;">'
                + '<option value="0" defaultcurrency="0"><?php echo $this->__('Select') ?>...</option>'
                <?php foreach ($this->getCountries() as $_countryId => $_info): ?>
                + '<option value="<?php echo $_info->Code ?>" defaultcurrency="<?php echo $_info->DefaultCurrencyCode ?>"><?php echo $this->jsQuoteEscape($this->escapeHtml($_info->Name)) ?><?php if (!empty($_info->Name)): ?><?php endif; ?></option>'
                <?php endforeach ?>
                + '</select></td>'
                + '<td><select class="<?php echo $_htmlClass ?> required-entry" name="<?php echo $_htmlName ?>[{{index}}][currency]" id="<?php echo $_htmlId ?>_row_{{index}}_currency" style="width:100px;">'
                + '<option value="0" currencycode="0"><?php echo $this->__('Select') ?>...</option>'
                <?php foreach ($this->getCurrencies() as $_currencyId => $_info): ?>
                + '<option value="<?php echo $_info->Code ?>" currencycode="<?php echo $_info->Code ?>"><?php echo $this->jsQuoteEscape($this->escapeHtml($_info->Name)) ?></option>'
                <?php endforeach ?>
                + '</select></td>'
                + '<td><input class="<?php echo $_htmlClass ?> required-entry <?php echo $_priceValueValidation ?>" type="text" name="<?php echo $_htmlName ?>[{{index}}][price]" value="{{price}}" id="<?php echo $_htmlId ?>_row_{{index}}_price" style="width:100px;" /></td>'
                + '<td><input class="<?php echo $_htmlClass ?>  <?php echo $_priceValueValidation ?>" type="text" name="<?php echo $_htmlName ?>[{{index}}][specialprice]" value="{{specialprice}}" id="<?php echo $_htmlId ?>_row_{{index}}_special_price" style="width:100px;" /></td>'
                + '<td class="nobr"><input class="<?php echo $_htmlClass ?> data validate-date" type="text" name="<?php echo $_htmlName ?>[{{index}}][specialpricefromdate]" value="{{specialpricefromdate}}" id="<?php echo $_htmlId ?>_special_price_{{index}}_from_date" style="width: 65px;" />'
                + '<img src="<?php echo $this->getSkinUrl('images/grid-cal.gif') ?>" alt="" class="v-middle" id="<?php echo $_htmlId ?>_special_price_{{index}}_from_date_trig" title="<?php echo Mage::helper('catalog')->__('Select Date') ?>" style=""></td>'
                + '<td class="nobr"><input class="<?php echo $_htmlClass ?> validate-date" type="text" name="<?php echo $_htmlName ?>[{{index}}][specialpricetodate]" value="{{specialpricetodate}}" id="<?php echo $_htmlId ?>_special_price_{{index}}_to_date" style="width: 65px;" />'
                + '<img src="<?php echo $this->getSkinUrl('images/grid-cal.gif') ?>" alt="" class="v-middle" id="<?php echo $_htmlId ?>_special_price_{{index}}_to_date_trig" title="<?php echo Mage::helper('catalog')->__('Select Date') ?>" style=""></td>'
                + '<td class="last"><input type="hidden" name="<?php echo $_htmlName ?>[{{index}}][delete]" class="delete" value="" id="<?php echo $_htmlId ?>_row_{{index}}_delete" />'
                + '<button title="<?php echo Mage::helper('core')->jsQuoteEscape(Mage::helper('catalog')->__("Delete Fixed Price")) ?>" type="button" class="scalable delete icon-btn delete-product-option" id="<?php echo $_htmlId ?>_row_{{index}}_delete_button" onclick="return fixedPriceControl.deleteItem(event);">'
                + '<span><span><span><?php echo Mage::helper('core')->jsQuoteEscape(Mage::helper('catalog')->__("Delete")) ?></span></span></span></button>'
                + '<input class="<?php echo $_htmlClass ?> data fixedPriceHidden" type="text" name="<?php echo $_htmlName ?>[{{index}}][countryhidden]" value="" id="<?php echo $_htmlId ?>_row_{{index}}_countryhidden" />'
                + '<input class="<?php echo $_htmlClass ?> data fixedPriceHidden" type="text" name="<?php echo $_htmlName ?>[{{index}}][currencyhidden]" value="" id="<?php echo $_htmlId ?>_row_{{index}}_currencyhidden" />'
                + '</td></tr>';

            var fixedPriceControl = {
                template: new Template(FixedPriceRowTemplate, new RegExp('(^|.|\\r|\\n)({{\\s*(\\w+)\\s*}})', "")),
                itemsCount: 0,
                addItem : function () {
                    /* Init element data */
                    var data = {
                        country:  0,
                        currency: 0,
                        price: "",
                        specialprice: "",
                        fromdate: "",
                        todate: "",
                        readOnly: false,
                        index: this.itemsCount++
                    };

                    if (arguments.length >= 6) {
                        data.country  = arguments[0],
                        data.currency = arguments[1],
                        data.price    = arguments[2],
                        data.specialprice = arguments[3],
                        data.specialpricefromdate = arguments[4],
                        data.specialpricetodate   = arguments[5],
                        data.readOnly = arguments[6]
                    }
                    /* Insert into element the created FixedPriceRowTemplate */
                    Element.insert($('<?php echo $_htmlId ?>_container'), {
                        bottom : this.template.evaluate(data)
                    });

                    var countrySelect = '<?php echo $_htmlId ?>' + '_row_' + data.index + '_country';
                    var currencySelect = '<?php echo $_htmlId ?>' + '_row_' + data.index + '_currency';
                    selectOption(countrySelect, data.country);
                    selectOption(currencySelect, data.currency)

                    /* Init selection for countries/currencies dropdowns */
                    $('<?php echo $_htmlId ?>_container').select('input', 'select').each(function(el){ Event.observe(el, 'change', el.setHasChanges.bind(el)); });

                    /* Init Calendars widget */
                    /* Calendar special price "start date" */
                    Calendar.setup({
                        inputField: "<?php echo $_htmlId ?>_special_price_" + data.index + "_from_date",
                        ifFormat: "%m/%e/%Y",
                        showsTime: false,
                        button: "<?php echo $_htmlId ?>_special_price_" + data.index + "_from_date_trig",
                        align: "Bl",
                        singleClick : true
                    });

                    /* Calendar special price "end date" */
                    Calendar.setup({
                        inputField: "<?php echo $_htmlId ?>_special_price_" + data.index + "_to_date",
                        ifFormat: "%m/%e/%Y",
                        showsTime: false,
                        button: "<?php echo $_htmlId ?>_special_price_" + data.index + "_to_date_trig",
                        align: "Bl",
                        singleClick : true
                    });

                    /* Apply onchange event on countries and currencies buttons */
                    $('<?php echo $_htmlId ?>_container').select('input', 'select').each(function(element){
                        if(element.tagName == 'SELECT') {
                            element.observe('change', function () {
                                var countrySelect = '<?php echo $_htmlId ?>' + '_row_' + data.index + '_country';
                                var currencySelect = '<?php echo $_htmlId ?>' + '_row_' + data.index + '_currency';
                                selectCountryCurrency(element, countrySelect, currencySelect, countries);
                            });
                        }
                    })

                    /**
                     * Init the logic for currencies selection or countries selection
                     * var element [object] - the selected element
                     * var countrySelect [string] - the countries dropdown selected element
                     * var currencySelect [string] - the currencies dropdown selected element
                     * var countries [array] - all Global-e countries for filtering by currencies
                     */
                    function selectCountryCurrency(element, countrySelect, currencySelect, countries){

                        var elementId = element.id;
                        /* when country was selected */
                        if(elementId == countrySelect){
                            var options = $(currencySelect).options;
                            for (var i = 0; i < options.length; i++) {
                                /* in case there is no default currency */
                                if(IsDefaultCurrenciesAll(element, options, currencySelect)){
                                    break;
                                }
                                /* select and lock the default currencies on the dropdown */
                                SelectAndLockCurrencies(element, options, currencySelect, i);
                            }
                        }else
                            /* when currency was selected */
                            if(elementId == currencySelect){
                                var options = $(countrySelect).options;
                                /* */
                                defaultCountries = CollectCountriesByDefaultCurrency(element, countries);
                                /* */
                                BuildCountriesOptions(options, defaultCountries, countrySelect);
                            }
                    }

                    /**
                     * when the selected default currency is '0', open the dropdown for selection
                     * var element [object] - the selected element
                     * var options [array] - all the dropdown options
                     * var currencySelect [string] - the currencies dropdown selected element
                     * return bool
                     */
                    function IsDefaultCurrenciesAll(element, options, currencySelect){

                        if(element.options[element.selectedIndex].getAttribute('defaultcurrency') == '0'){
                            options[0].selected = true;
                            $(currencySelect).disabled =  false;
                            $(currencySelect).removeClassName('disabled');
                            return true;
                        }else{
                            return false;
                        }
                    }

                    /**
                     * Found the default currency on the currencies dropdown, select the option and lock the dropdown
                     * var element [object] - the selected element
                     * var options [array] - all the dropdown options
                     * var currencySelect [string] - the currencies dropdown selected element
                     * var index [int] - current index
                     * return bool
                     */
                    function SelectAndLockCurrencies(element, options, currencySelect, index){

                        if(options[index].getAttribute('currencycode') == element.options[element.selectedIndex].getAttribute('defaultcurrency')){
                            options[index].selected = true;
                            $(currencySelect).disabled = true;
                            $(currencySelect).addClassName('disabled');
                            var currencyHidden = '<?php echo $_htmlId ?>' + '_row_' + data.index + '_currencyhidden';
                            $(currencyHidden).value = options[index].getAttribute('currencycode');
                        }
                    }

                    /**
                     * Collect all countries by the selected currency
                     * var element [object] - the selected element
                     * var countries [array] - all Global-e countries for filtering by currencies
                     * return defaultCountries [array] - the collected countries with the same selected default currency
                     */
                    function CollectCountriesByDefaultCurrency(element, countries){

                        var defaultCountries = [];
                        var countDefaultCountries = 0;
                        var selectedCurrencyCode = element.options[element.selectedIndex].getAttribute('currencycode');
                        if(selectedCurrencyCode == '0'){
                            return countries;
                        }
                        for (var i = 0; i < countries.length; i++) {
                            if( (countries[i].DefaultCurrencyCode == selectedCurrencyCode) ||
                                (countries[i].Code == selectedCurrencyCode) ){
                                defaultCountries[countDefaultCountries] = countries[i];
                                countDefaultCountries++;
                            }
                        }
                        return defaultCountries;
                    }

                    /**
                     * Build countries options from the collected countries with the same selected default currency
                     * var options [array] - all the dropdown options
                     * var defaultCountries [array] - the collected countries with the same selected default currency
                     * var countrySelect [string] - the countries dropdown selected element
                     */
                    function BuildCountriesOptions(options, defaultCountries, countrySelect){

                        options.length = 0;
                        // add empty currency as default
                        AddNewOption(options, 0, "0", "<?php echo $this->__('Select') ?>...");
                        for(var i = 0; i < defaultCountries.length; i++){
                            AddNewOption(options, defaultCountries[i].Code, defaultCountries[i].DefaultCurrencyCode, defaultCountries[i].Name);
                        }
                        if(defaultCountries.length == 1){
                            options.selectedIndex = 1;
                            $(countrySelect).disabled = true;
                            $(countrySelect).addClassName('disabled');
                            var countryHidden = '<?php echo $_htmlId ?>' + '_row_' + data.index + '_countryhidden';
                            $(countryHidden).value = options[1].value;
                        }else{
                            $(countrySelect).disabled =  false;
                            $(countrySelect).removeClassName('disabled');
                        }
                    }

                    /**
                     * Fill dropdown select with options
                     * var SelectElement [string]
                     * var value [string]
                     */
                    function AddNewOption(options, value, defaultCurrencyCode, name){

                        var option = document.createElement('option');
                        option.value = value;
                        option.setAttribute("defaultcurrency", defaultCurrencyCode);
                        option.text = name;
                        options.add(option);
                    }

                    /**
                     * Select an option by value
                     * var SelectElement [string]
                     * var value [string]
                     */
                    function selectOption(SelectElement, value){

                        var options = $(SelectElement).options;
                        for (var i = 0; i < options.length; i++) {
                            if(options[i].value == value){
                                options[i].selected = i;
                            }
                        }
                    }

                },
                disableElement: function(el) {
                    el.disabled = true;
                    el.addClassName('disabled');
                },
                deleteItem: function(event) {
                    var tr = Event.findElement(event, 'tr');
                    if (tr) {
                        Element.select(tr, '.delete').each(function(elem){elem.value='1'});
                        Element.select(tr, ['input', 'select']).each(function(elem){elem.hide()});
                        Element.hide(tr);
                        Element.addClassName(tr, 'no-display template');
                    }
                    return false;
                }
            };

            <?php /* load all fixed prices items for product */ ?>
            <?php foreach ($this->getProductFixedPrices() as $Item): ?>
            fixedPriceControl.addItem('<?php echo $Item['country_code'] ?>', '<?php echo $Item['currency_code'] ?>', '<?php echo $Item['price'] ?>', '<?php echo $Item['special_price'] ?>', '<?php echo $Item['date_from'] ?>', '<?php echo $Item['date_to'] ?>');
            <?php endforeach; ?>
            //]]>
        </script>
    </td></tr>
